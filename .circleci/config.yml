version: 2.1
executors:
  node:
    docker:
    - image: circleci/node

jobs:
  ## ----------------
  ##  frontend jobs ##
  ## ----------------
  frontend_install:
    executor: node
    working_directory: ~/project/frontend
    steps:
      - checkout:
          path: ~/project
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: yarn install
      - persist_to_workspace:
          paths:
          - frontend/
          root: ~/project
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      
  frontend_test:
    executor: node
    working_directory: ~/project/frontend
    steps:
      - attach_workspace:
          at: ~/project/
      - run: mkdir -p reports/
      - run: yarn lint
      - run:
          command: yarn test --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: reports/junit
          name: Run tests with JUnit as reporter
      - store_test_results:
          path: reports/
  frontend_build:
    executor: node
    working_directory: ~/project/frontend/
    steps:
      - attach_workspace:
          at: ~/project/
      - run: yarn build
      - persist_to_workspace:
          paths:
          - frontend/
          root: ~/project
      # https://circleci.com/docs/2.0/configuration-reference/#store_artifacts
      # not needed because we manage the deployment artifacts on the firebase side
      # - store_artifacts:
      #     path: ./build
  frontend_deploy:
    executor: node
    working_directory: ~/project/frontend/
    steps:
      - attach_workspace:
          at: ~/project/
      - run: yarn firebase deploy --token "$FIREBASE_TOKEN"
  
  ## ----------------
workflows:
  version: 2
  branch:
    jobs:
    - frontend_install
    - frontend_test:
        requires:
          - frontend_install
    - frontend_build:
        # add this filter if the build takes long and branches aren't really needed to be built for the FE
        # filters:
          # branches:
            # only:
              # master
        requires:
          - frontend_install
    - frontend_deploy:
        filters:
          branches:
            only:
              master
        requires:
          - frontend_build